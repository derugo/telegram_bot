import logging
from datetime import datetime
import random
import string
import yadisk
import os
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã –∏ –ø–∞—Ä–æ–ª—å
BOT_TOKEN = "7991720922:AAHPQkyL69IR__tJs8btNOrh67M48iNFugQ"
YANDEX_TOKEN = "y0__xCr4L-ZBBjblgMgje-YlhOWdzLSVzL4yFbDo18R9G3OJVchXA"
ADMIN_PASSWORD = "vasiliy.derugo"

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
tasks = {}
user_roles = {}
storage = None

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
readable = {
    "loading_date": "–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
    "departure": "–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    "destination": "–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
    "route": "–ú–∞—Ä—à—Ä—É—Ç",
    "customs_departure": "–¢–∞–º–æ–∂–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    "customs_destination": "–¢–∞–º–æ–∂–Ω—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
    "cargo_type": "–•–∞—Ä–∞–∫—Ç–µ—Ä –≥—Ä—É–∑–∞",
    "sender_contact": "–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
    "driver_rate": "–°—Ç–∞–≤–∫–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è",
    "client_rate": "–°—Ç–∞–≤–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞",
    "additional_info": "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
}


class YandexDiskStorage:
    def __init__(self):
        self.disk = yadisk.YaDisk(token=YANDEX_TOKEN)
        self.ensure_folder_structure()

    def ensure_folder_structure(self):
        try:
            if not self.disk.exists('/–ó–∞–∫–∞–∑—ã'):
                self.disk.mkdir('/–ó–∞–∫–∞–∑—ã')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            raise

    def create_folder_if_not_exists(self, path):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏"""
        try:
            if not self.disk.exists(path):
                parent_path = os.path.dirname(path)
                if parent_path and parent_path != '/':
                    self.create_folder_if_not_exists(parent_path)
                self.disk.mkdir(path)
                logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {path}: {e}")
            raise

    def get_client_id_for_task(self, task_id):
        """–ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        for tid, task_data in tasks.items():
            if (task_data["data"] == tasks[task_id]["data"] and
                    task_data["role"] == "client"):
                return tid
        return task_id

    def save_file(self, file_path: str, task_id: str, file_type: str) -> str:
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–æ–∫
            client_id = self.get_client_id_for_task(task_id)

            filename = os.path.basename(file_path)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç–∏ –¥–ª—è –ø–∞–ø–æ–∫
            order_folder = f'/–ó–∞–∫–∞–∑—ã/{client_id}'
            type_folder = f'{order_folder}/{"–§–æ—Ç–æ –≥—Ä—É–∑–∞" if file_type == "photos" else "–î–æ–∫—É–º–µ–Ω—Ç—ã"}'

            # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
            self.create_folder_if_not_exists(order_folder)
            self.create_folder_if_not_exists(type_folder)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞
            yandex_path = f'{type_folder}/{filename}'

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            self.disk.upload(file_path, yandex_path, overwrite=True)

            logging.info(f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {yandex_path}")
            return yandex_path

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {e}")
            raise


def generate_random_id(length=8):
    chars = string.ascii_uppercase + string.digits
    return ''.join(random.choice(chars) for _ in range(length))


def generate_task_id(role):
    date = datetime.now().strftime("%d%m%Y")
    return f"{date}-{generate_random_id(4)}-{role[:3]}"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ö–ª–∏–µ–Ω—Ç", "–í–æ–¥–∏—Ç–µ–ª—å"], ["–î–∏—Å–ø–µ—Ç—á–µ—Ä"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=reply_markup)
    context.user_data["stage"] = "role_selection"


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "upload_photo":
        context.user_data["upload_type"] = "photo"
        await query.message.reply_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≥—Ä—É–∑–∞")
        context.user_data["stage"] = "waiting_for_photo"
    elif query.data == "upload_docs":
        context.user_data["upload_type"] = "document"
        await query.message.reply_text("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç")
        context.user_data["stage"] = "waiting_for_document"


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("stage") != "waiting_for_photo":
        return

    task_id = context.user_data.get("current_task")
    if not task_id or task_id not in tasks:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    try:
        photo = update.message.photo[-1]
        file_id = photo.file_id

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        photo_file = await photo.get_file()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"photo_{timestamp}.jpg"
        os.makedirs("temp", exist_ok=True)
        file_path = os.path.join("temp", filename)
        await photo_file.download_to_drive(file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
        yandex_path = storage.save_file(file_path, task_id, "photos")
        os.remove(file_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

        # –ù–∞–π–¥–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞
        client_id = None
        for tid, task_data in tasks.items():
            if (task_data["data"] == tasks[task_id]["data"] and
                    task_data["role"] == "client"):
                client_id = tid
                break

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        for save_id in [task_id, client_id]:
            if save_id:
                task = tasks[save_id]
                if "media" not in task:
                    task["media"] = {}
                if "photos" not in task["media"]:
                    task["media"]["photos"] = []
                task["media"]["photos"].append(file_id)
                if "yandex_paths" not in task["media"]:
                    task["media"]["yandex_paths"] = []
                task["media"]["yandex_paths"].append(yandex_path)

        await update.message.reply_text("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

        keyboard = [
            [InlineKeyboardButton("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", callback_data="upload_photo"),
             InlineKeyboardButton("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="upload_docs")]
        ]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("stage") != "waiting_for_document":
        return

    task_id = context.user_data.get("current_task")
    if not task_id or task_id not in tasks:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    try:
        document = update.message.document
        file_id = document.file_id
        doc_info = {"file_id": file_id, "name": document.file_name}

        # –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc_file = await document.get_file()
        filename = document.file_name
        os.makedirs("temp", exist_ok=True)
        file_path = os.path.join("temp", filename)
        await doc_file.download_to_drive(file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
        yandex_path = storage.save_file(file_path, task_id, "documents")
        os.remove(file_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

        # –ù–∞–π–¥–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞
        client_id = None
        for tid, task_data in tasks.items():
            if (task_data["data"] == tasks[task_id]["data"] and
                    task_data["role"] == "client"):
                client_id = tid
                break

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        for save_id in [task_id, client_id]:
            if save_id:
                task = tasks[save_id]
                if "media" not in task:
                    task["media"] = {}
                if "documents" not in task["media"]:
                    task["media"]["documents"] = []
                task["media"]["documents"].append(doc_info)
                if "yandex_paths" not in task["media"]:
                    task["media"]["yandex_paths"] = []
                task["media"]["yandex_paths"].append(yandex_path)

        await update.message.reply_text("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

        keyboard = [
            [InlineKeyboardButton("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="upload_photo"),
             InlineKeyboardButton("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="upload_docs")]
        ]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip()
    stage = context.user_data.get("stage")

    if stage == "role_selection":
        role = text.lower()
        if role not in ["–∫–ª–∏–µ–Ω—Ç", "–≤–æ–¥–∏—Ç–µ–ª—å", "–¥–∏—Å–ø–µ—Ç—á–µ—Ä"]:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–æ–ª–∏!")
            return

        if role == "–¥–∏—Å–ø–µ—Ç—á–µ—Ä":
            await update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:", reply_markup=ReplyKeyboardRemove())
            context.user_data["stage"] = "dispatcher_auth"
            return

        user_roles[user.id] = role
        context.user_data["stage"] = f"{role}_id_input"
        await update.message.reply_text(
            f"üì• –í–≤–µ–¥–∏—Ç–µ ID {'–≥—Ä—É–∑–∞' if role == '–∫–ª–∏–µ–Ω—Ç' else '–∑–∞–¥–∞–Ω–∏—è'}:", reply_markup=ReplyKeyboardRemove()
        )

    elif stage == "dispatcher_auth":
        if text == ADMIN_PASSWORD:
            user_roles[user.id] = "–¥–∏—Å–ø–µ—Ç—á–µ—Ä"
            context.user_data["stage"] = "dispatcher_action_choice"
            keyboard = [["–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é"]]
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                                                             one_time_keyboard=True))
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
            context.user_data.clear()

    elif stage == "dispatcher_action_choice":
        if text.lower() == "—Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑":
            context.user_data["task_data"] = {}
            context.user_data["stage"] = "dispatcher_create_task"
            await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        elif text.lower() == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
            context.user_data["stage"] = "dispatcher_view_history"
            await update.message.reply_text("üîé –í–≤–µ–¥–∏—Ç–µ ID –≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")

    elif stage == "dispatcher_create_task":
        task_data = context.user_data.get("task_data", {})
        steps = [
            ("loading_date", "üìç –ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"),
            ("departure", "üèÅ –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:"),
            ("destination", "üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç:"),
            ("route", "üõÇ –¢–∞–º–æ–∂–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"),
            ("customs_departure", "üõÇ –¢–∞–º–æ–∂–Ω—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:"),
            ("customs_destination", "üì¶ –•–∞—Ä–∞–∫—Ç–µ—Ä –≥—Ä—É–∑–∞:"),
            ("cargo_type", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:"),
            ("sender_contact", "üí∞ –°—Ç–∞–≤–∫–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è:"),
            ("driver_rate", "üí∞ –°—Ç–∞–≤–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:"),
            ("client_rate", "‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        ]

        current_step = next((s for s in steps if s[0] not in task_data), None)
        if current_step:
            task_data[current_step[0]] = text
            context.user_data["task_data"] = task_data
            await update.message.reply_text(current_step[1])
            return

        driver_id = generate_task_id("driver")
        client_id = generate_task_id("client")

        tasks[driver_id] = {"data": task_data, "media": {}, "role": "driver"}
        tasks[client_id] = {"data": task_data, "media": {}, "role": "client"}

        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nüöö ID –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è: {driver_id}\nüì¶ ID –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {client_id}")
        context.user_data.clear()

    elif stage == "–≤–æ–¥–∏—Ç–µ–ª—å_id_input":
        task = tasks.get(text)
        if task and task["role"] == "driver":
            context.user_data["current_task"] = text
            context.user_data["stage"] = "driver_main_menu"
            task_info = task["data"]
            response = [f"üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é {text}:"]
            for k, v in task_info.items():
                if k in readable and k != "client_rate":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–≤–∫—É –∫–ª–∏–µ–Ω—Ç–∞
                    if k == "driver_rate":
                        response.append(f"‚Ä¢ –°—Ç–∞–≤–∫–∞: {v}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ "–°—Ç–∞–≤–∫–∞"
                    else:
                        response.append(f"‚Ä¢ {readable[k]}: {v}")
            await update.message.reply_text("\n".join(response))

            keyboard = [[InlineKeyboardButton("üì∏ –§–æ—Ç–æ –≥—Ä—É–∑–∞", callback_data="upload_photo"),
                         InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="upload_docs")]]
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞–Ω–∏—è!")

    elif stage == "–∫–ª–∏–µ–Ω—Ç_id_input":
        task = tasks.get(text)
        if task and task["role"] == "client":
            response = [f"üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≥—Ä—É–∑—É {text}:"]
            for k, v in task["data"].items():
                if k in readable and k != "driver_rate":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–≤–∫—É –≤–æ–¥–∏—Ç–µ–ª—è
                    if k == "client_rate":
                        response.append(f"‚Ä¢ –°—Ç–∞–≤–∫–∞: {v}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ "–°—Ç–∞–≤–∫–∞"
                    else:
                        response.append(f"‚Ä¢ {readable[k]}: {v}")

            media_info = []
            sent_photos = set()
            if "media" in task:
                if "photos" in task["media"]:
                    photos = task["media"]["photos"]
                    unique_photos = []
                    for photo_id in photos:
                        if photo_id not in sent_photos:
                            sent_photos.add(photo_id)
                            unique_photos.append(photo_id)

                    if unique_photos:
                        media_info.append(f"üì∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {len(unique_photos)}")
                        for file_id in unique_photos:
                            await update.message.reply_photo(file_id)

                if "documents" in task["media"]:
                    media_info.append(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã:")
                    for doc in task["media"]["documents"]:
                        await update.message.reply_document(doc["file_id"])
                        media_info.append(f"  ‚Ä¢ {doc['name']}")

            if media_info:
                response.append("\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:")
                response.extend(media_info)

            await update.message.reply_text("\n".join(response))
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥—Ä—É–∑–∞!")

    elif stage == "dispatcher_view_history":
        task = tasks.get(text)
        if task:
            response = [f"üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ID {text}:"]
            for key, value in task["data"].items():
                response.append(f"‚Ä¢ {readable.get(key, key)}: {value}")

            if "media" in task:
                if "photos" in task["media"] and task["media"]["photos"]:
                    response.append("\nüì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:")
                    for photo_id in task["media"]["photos"]:
                        await update.message.reply_photo(photo_id)

                if "documents" in task["media"] and task["media"]["documents"]:
                    response.append("\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã:")
                    for doc in task["media"]["documents"]:
                        await update.message.reply_document(doc["file_id"])
                        response.append(f"  ‚Ä¢ {doc['name']}")

            await update.message.reply_text("\n".join(response))
        else:
            await update.message.reply_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–º—É ID")
        context.user_data.clear()


def main():
    global storage
    storage = YandexDiskStorage()

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()